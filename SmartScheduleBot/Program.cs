using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using ClosedXML.Excel;

// Foydalanuvchi holatini saqlash uchun sinf
public class UserState
{
    public string SelectedFaculty { get; set; } = "";
    public string SelectedCourse { get; set; } = "";
    public string SelectedGroup { get; set; } = "";
    public string SelectedTeacherCode { get; set; } = null;
    public bool IsTeacherMode { get; set; } = false;
}

class Program
{
    private static TelegramBotClient botClient;
    private static TelegramBotClient targetBotClient;
    private static string targetBotToken = "6384809941:AAHmFKJe6963lifn0etUHbpyGsodO7Olzyg";
    private static long targetChatId = 6010438305;
    private static string baseUrl = "https://smartschedule-k0ex.onrender.com"; // Backend API manzili
    private static readonly Dictionary<long, UserState> userStates = new Dictionary<long, UserState>();
    private static readonly Dictionary<long, bool> awaitingAdminCode = new Dictionary<long, bool>();
    private static readonly HashSet<long> uniqueUsers = new HashSet<long>();
    private static readonly Dictionary<long, DateTime> activeUsers = new Dictionary<long, DateTime>();
    private static readonly Dictionary<long, string> userUsernames = new Dictionary<long, string>(); // Username larni saqlash
    private static int statsMessageId = 0;
    private static readonly string dataFilePath = "user_data.txt"; // Ma‚Äôlumotlarni saqlash uchun text fayl

    // Fayldan ma‚Äôlumotlarni yuklash
    private static void LoadUserData()
    {
        try
        {
            if (File.Exists(dataFilePath))
            {
                var lines = File.ReadAllLines(dataFilePath);
                bool readingUniqueUsers = false;
                bool readingUserUsernames = false;

                foreach (var line in lines)
                {
                    if (line.Trim() == "uniqueUsers:")
                    {
                        readingUniqueUsers = true;
                        readingUserUsernames = false;
                        continue;
                    }
                    else if (line.Trim() == "userUsernames:")
                    {
                        readingUniqueUsers = false;
                        readingUserUsernames = true;
                        continue;
                    }

                    if (readingUniqueUsers && long.TryParse(line.Trim(), out long userId))
                    {
                        uniqueUsers.Add(userId);
                    }
                    else if (readingUserUsernames)
                    {
                        var parts = line.Split(':');
                        if (parts.Length >= 2 && long.TryParse(parts[0].Trim(), out long id))
                        {
                            string username = string.Join(":", parts[1..]).Trim();
                            userUsernames[id] = username;
                        }
                    }
                }
                Console.WriteLine("‚úÖ Fayldan foydalanuvchi ma‚Äôlumotlari yuklandi.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Fayldan ma‚Äôlumot yuklashda xato: {ex.Message}");
        }
    }

    // Ma‚Äôlumotlarni faylga saqlash
    private static void SaveUserData()
    {
        try
        {
            using (var writer = new StreamWriter(dataFilePath))
            {
                writer.WriteLine("uniqueUsers:");
                foreach (var userId in uniqueUsers)
                {
                    writer.WriteLine(userId);
                }
                writer.WriteLine("userUsernames:");
                foreach (var kvp in userUsernames)
                {
                    writer.WriteLine($"{kvp.Key}:{kvp.Value}");
                }
            }
            Console.WriteLine("‚úÖ Foydalanuvchi ma‚Äôlumotlari faylga saqlandi.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Faylga ma‚Äôlumot saqlashda xato: {ex.Message}");
        }
    }

    public static async Task Main(string[] args)
    {
        var botToken = Environment.GetEnvironmentVariable("BOT_TOKEN") ?? "7355644988:AAEyex_eompvTQ6ju_gx0cR9dmOonraBRRE";
        botClient = new TelegramBotClient(botToken);
        targetBotClient = new TelegramBotClient(targetBotToken);

        // Fayldan ma‚Äôlumotlarni yuklash
        LoadUserData();

        var me = await botClient.GetMeAsync();
        Console.WriteLine($"‚úÖ –ë–æ—Ç {me.FirstName} –±–∞ –∫–æ—Ä –∞–Ω–¥–æ—Ö—Ç–∞ —à—É–¥.");

        // Webhook o'rniga polling ishlatiladi
        await botClient.DeleteWebhookAsync(); // Agar oldin webhook o'rnatilgan bo'lsa, o'chirish
        int offset = 0;

        // Boshlang'ich statistika xabarini yuborish
        await SendInitialStatsMessage();

        // Statistikani yangilash uchun alohida vazifa
        _ = Task.Run(async () =>
        {
            while (true)
            {
                await UpdateStatsMessage();
                SaveUserData(); // Har 30 sekundda ma‚Äôlumotlarni saqlash
                await Task.Delay(30000);
            }
        });

        // Polling tsikli
        while (true)
        {
            try
            {
                var updates = await botClient.GetUpdatesAsync(offset);
                foreach (var update in updates)
                {
                    await HandleUpdateAsync(botClient, update, CancellationToken.None);
                    offset = update.Id + 1;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Polling xatoligi: {ex.Message}");
            }
            await Task.Delay(1000); // Har sekundda yangilanishlarni tekshirish
        }
    }

    private static async Task SendInitialStatsMessage()
    {
        try
        {
            int totalUsers = uniqueUsers.Count;
            int activeUsersCount = activeUsers.Count(u => (DateTime.Now - u.Value).TotalMinutes <= 5);
            string statsMessage = $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                                 $"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {totalUsers}\n" +
                                 $"–û–Ω–ª–∞–∏ÃÜ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {activeUsersCount}\n" +
                                 $"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{GetActiveUsersList()}";

            var sentMessage = await targetBotClient.SendTextMessageAsync(targetChatId, statsMessage);
            statsMessageId = sentMessage.MessageId;
            Console.WriteLine("‚úÖ Boshlang‚Äòich statistika xabari yuborildi.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –•–∞—Ç–æ–≥”£ (SendInitialStatsMessage): {ex.Message}");
        }
    }

    private static async Task UpdateStatsMessage()
    {
        try
        {
            int totalUsers = uniqueUsers.Count;
            int activeUsersCount = activeUsers.Count(u => (DateTime.Now - u.Value).TotalMinutes <= 5);
            string statsMessage = $"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                                 $"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {totalUsers}\n" +
                                 $"–û–Ω–ª–∞–∏ÃÜ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {activeUsersCount}\n" +
                                 $"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{GetActiveUsersList()}";

            await targetBotClient.EditMessageTextAsync(targetChatId, statsMessageId, statsMessage);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("message is not modified")) return;
            Console.WriteLine($"‚ùå –•–∞—Ç–æ–≥”£ (UpdateStatsMessage): {ex.Message}");
        }
    }

    // Faol foydalanuvchilar ro‚Äòyxatini username bilan qaytaradi
    private static string GetActiveUsersList()
    {
        string result = "";
        foreach (var user in activeUsers)
        {
            if ((DateTime.Now - user.Value).TotalMinutes <= 5)
            {
                string username = userUsernames.ContainsKey(user.Key) ? userUsernames[user.Key] : "Noma‚Äôlum";
                result += $"ID: {user.Key}, Username: {username}\n";
            }
        }
        return result.Length > 0 ? result : "–§–∞–æ–ª –∫–æ—Ä–±–∞—Ä–ª–∞—Ä –π—û“õ.";
    }

    private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Type == UpdateType.Message && update.Message?.Text != null)
        {
            long chatId = update.Message.Chat.Id;
            long userId = update.Message.From.Id;
            string messageText = update.Message.Text;

            uniqueUsers.Add(userId);
            activeUsers[userId] = DateTime.Now;
            userUsernames[userId] = update.Message.From.Username ?? $"{update.Message.From.FirstName} {update.Message.From.LastName}".Trim();

            if (!userStates.ContainsKey(chatId))
                userStates[chatId] = new UserState();

            if (awaitingAdminCode.ContainsKey(chatId) && awaitingAdminCode[chatId])
            {
                if (messageText == "13082003")
                {
                    awaitingAdminCode[chatId] = false;
                    Console.WriteLine($"üì© –ö–æ—Ä–±–∞—Ä {userId} –∫–æ–¥–∏ –¥—É—Ä—É—Å—Ç–∏ –∞–¥–º–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥.");
                    await ExportTeachersList(chatId);
                }
                else
                {
                    awaitingAdminCode[chatId] = false;
                    await botClient.SendTextMessageAsync(chatId, "‚ùå –ö–æ–¥ –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç! –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –±–æ —Ñ–∞—Ä–º–æ–Ω–∏ /admin –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.");
                }
                return;
            }

            switch (messageText)
            {
                case "/start":
                    Console.WriteLine($"üì© –ö–æ—Ä–±–∞—Ä {userId} —Ñ–∞—Ä–º–æ–Ω–∏ /start-—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥.");
                    awaitingAdminCode[chatId] = false;
                    await botClient.SetChatMenuButtonAsync(chatId, new MenuButtonDefault());
                    bool isSubscribed = await IsUserSubscribed(userId);
                    if (isSubscribed)
                    {
                        userStates[chatId] = new UserState();
                        await SendWelcomeMessage(chatId);
                        await SendUserTypeSelection(chatId);
                    }
                    else
                    {
                        await SendSubscriptionPrompt(chatId);
                    }
                    break;

                case "/help":
                    Console.WriteLine($"üì© –ö–æ—Ä–±–∞—Ä {userId} —Ñ–∞—Ä–º–æ–Ω–∏ /help-—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥.");
                    await SendHelpMessage(chatId);
                    break;

                case "/admin":
                    awaitingAdminCode[chatId] = true;
                    await botClient.SendTextMessageAsync(chatId, "üîë –õ—É—Ç—Ñ–∞–Ω –∫–æ–¥–∏ –∞–¥–º–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:");
                    Console.WriteLine($"üì© –ö–æ—Ä–±–∞—Ä {userId} —Ñ–∞—Ä–º–æ–Ω–∏ /admin-—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥.");
                    break;

                default:
                    if (userStates[chatId].IsTeacherMode && userStates[chatId].SelectedTeacherCode == null && !messageText.StartsWith("/"))
                    {
                        await HandleTeacherCodeInput(chatId, messageText);
                    }
                    else if (userStates[chatId].IsTeacherMode && userStates[chatId].SelectedTeacherCode != null && !messageText.StartsWith("/"))
                    {
                        await HandleDaySelection(chatId, messageText);
                    }
                    else if (!userStates[chatId].IsTeacherMode && !messageText.StartsWith("/"))
                    {
                        await HandleDaySelection(chatId, messageText);
                    }
                    else if (messageText.StartsWith("/"))
                    {
                        await botClient.SendTextMessageAsync(chatId,
                            "‚ùå –§–∞—Ä–º–æ–Ω–∏ –Ω–æ–º–∞—ä–ª—É–º! –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ —Ñ–∞—Ä–º–æ–Ω“≥–æ–∏ –º–∞–≤“∑—É–¥ /help-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.");
                        Console.WriteLine($"üì© –ö–æ—Ä–±–∞—Ä {userId} —Ñ–∞—Ä–º–æ–Ω–∏ –Ω–æ–¥—É—Ä—É—Å—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥: {messageText}");
                    }
                    break;
            }
        }
        else if (update.Type == UpdateType.CallbackQuery)
        {
            long userId = update.CallbackQuery.From.Id;
            uniqueUsers.Add(userId);
            activeUsers[userId] = DateTime.Now;
            userUsernames[userId] = update.CallbackQuery.From.Username ?? $"{update.CallbackQuery.From.FirstName} {update.CallbackQuery.From.LastName}".Trim();
            if (!userStates.ContainsKey(update.CallbackQuery.Message.Chat.Id))
                userStates[update.CallbackQuery.Message.Chat.Id] = new UserState();
            await HandleCallbackQuery(update.CallbackQuery);
        }
    }

    private static async Task<bool> IsUserSubscribed(long userId)
    {
        try
        {
            var chatMember = await botClient.GetChatMemberAsync("@Career1ink", userId);
            return chatMember.Status is ChatMemberStatus.Member or ChatMemberStatus.Administrator or ChatMemberStatus.Creator;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ –±–æ —Ö–∞—Ç–æ–≥”£ —Ä”Ø –±–∞ —Ä”Ø —à—É–¥: {ex.Message}");
            return false;
        }
    }

    private static async Task SendWelcomeMessage(long chatId)
    {
        string welcomeMessage =
            "üéâ –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ *SmartScheduleBot*! –ú–∞–Ω –±–∞ —à—É–º–æ –¥–∞—Ä —ë—Ñ—Ç–∞–Ω–∏ –æ—Å–æ–Ω –≤–∞ –∑—É–¥ –∂–∞–¥–≤–∞–ª–∏ –¥–∞—Ä—Åƒ´ –∫”Ø–º–∞–∫ –º–µ—Ä–∞—Å–æ–Ω–∞–º.\n\n" +
            "üìö *–ò–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –º–∞–Ω:*\n" +
            "- –ë–∞—Ä–æ–∏ –¥–æ–Ω–∏—à“∑”Ø—ë–Ω –∂–∞–¥–≤–∞–ª–∏ –¥–∞—Ä—Åƒ´ –∞–∑ —Ä”Ø–∏ —Ñ–∞–∫—É–ª—Ç–∞, –∫—É—Ä—Å –≤–∞ –≥—É—Ä”Ø“≥.\n" +
            "- –ë–∞—Ä–æ–∏ –º—É–∞–ª–ª–∏–º–æ–Ω –∂–∞–¥–≤–∞–ª–∏ –¥–∞—Ä—Åƒ´ —Ç–∞–≤–∞—Å—Å—É—Ç–∏ –∫–æ–¥–∏ –º–∞—Ö—Å—É—Å.\n" +
            "- –ñ–∞–¥–≤–∞–ª–∏ –¥–∞“õ–∏“õ –±–∞—Ä–æ–∏ “≥–∞—Ä —Ä”Ø–∑ –≤–∞ –¥–∏–¥–∞–Ω–∏ –∂–∞–¥–≤–∞–ª–∏ –ø—É—Ä—Ä–∞ —Ç–∞–≤–∞—Å—Å—É—Ç–∏ —Ç—É–≥–º–∞–∏ –≤–µ–±.\n\n" +
            "üîß *–§–∞—Ä–º–æ–Ω“≥–æ–∏ –º–∞–≤“∑—É–¥:*\n" +
            "/start - –û“ì–æ–∑–∏ –¥—É–±–æ—Ä–∞–∏ –±–æ—Ç\n" +
            "/help - –ö”Ø–º–∞–∫ –≤–∞ –∏—Ç—Ç–∏–ª–æ–æ—Ç\n" +
            "/admin - –ë–æ—Ä–≥–∏—Ä–∏–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –º—É–∞–ª–ª–∏–º–æ–Ω –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω“≥–æ\n\n" +
            "üì© *–ë–∞—Ä–æ–∏ –ø–µ—à–Ω–∏“≥–æ–¥ –≤–∞ —Ç–∞–ª–∞–±“≥–æ:* –ë–∞ @future1308 –Ω–∞–≤–∏—Å–µ–¥!";

        await botClient.SendTextMessageAsync(chatId, welcomeMessage, parseMode: ParseMode.Markdown);
        Console.WriteLine($"üì© –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} –ø–∞—ë–º–∏ —Ö—É—à –æ–º–∞–¥–µ–¥ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
    }

    private static async Task SendHelpMessage(long chatId)
    {
        string helpMessage =
            "‚ÑπÔ∏è *–Å—Ä–¥–∞–º—á–∏–∏ SmartScheduleBot*\n\n" +
            "–ú–∞–Ω –±–∞ —à—É–º–æ –¥–∞—Ä —ë—Ñ—Ç–∞–Ω–∏ –∂–∞–¥–≤–∞–ª–∏ –¥–∞—Ä—Åƒ´ –æ—Å–æ–Ω –∫”Ø–º–∞–∫ –º–µ—Ä–∞—Å–æ–Ω–∞–º:\n" +
            "1. –ê–≥–∞—Ä –¥–æ–Ω–∏—à“∑”Ø –±–æ—à–µ–¥: –§–∞–∫—É–ª—Ç–∞, –∫—É—Ä—Å –≤–∞ –≥—É—Ä”Ø“≥–∞—Ç–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.\n" +
            "2. –ê–≥–∞—Ä –º—É–∞–ª–ª–∏–º –±–æ—à–µ–¥: –ö–æ–¥–∏ –º–∞—Ö—Å—É—Å–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.\n" +
            "3. –ë–∞—Ä–æ–∏ –∂–∞–¥–≤–∞–ª–∏ —Ä”Ø–∑–æ–Ω–∞ —Ä”Ø–∑—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ —ë —Ç–∞–≤–∞—Å—Å—É—Ç–∏ —Ç—É–≥–º–∞–∏ *–ü—É—Ä—Ä–∞* –∂–∞–¥–≤–∞–ª–∏ –∫–æ–º–∏–ª—Ä–æ –±–∏–Ω–µ–¥.\n\n" +
            "üîß *–§–∞—Ä–º–æ–Ω“≥–æ:*\n" +
            "/start - –û“ì–æ–∑\n" +
            "/help - –ò–Ω –∫”Ø–º–∞–∫\n" +
            "/admin - –†”Ø–π—Ö–∞—Ç–∏ –º—É–∞–ª–ª–∏–º–æ–Ω (—Ñ–∞“õ–∞—Ç –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω“≥–æ)\n\n" +
            "üì© –ê–≥–∞—Ä —Å–∞–≤–æ–ª —ë –ø–µ—à–Ω–∏“≥–æ–¥ –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, –±–∞ @future1308 –º—É—Ä–æ“∑–∏–∞—Ç –∫—É–Ω–µ–¥!";

        await botClient.SendTextMessageAsync(chatId, helpMessage, parseMode: ParseMode.Markdown);
        Console.WriteLine($"üì© –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} –ø–∞—ë–º–∏ –∫”Ø–º–∞–∫ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
    }

    private static async Task SendUserTypeSelection(long chatId)
    {
        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("üë®‚Äçüéì –î–æ–Ω–∏—à“∑”Ø", "student") },
            new[] { InlineKeyboardButton.WithCallbackData("üë®‚Äçüè´ –ú—É–∞–ª–ª–∏–º", "teacher") }
        });
        await botClient.SendTextMessageAsync(chatId, "üìå –ë–∞ –∫–∞–¥–æ–º —Å–∏—Ñ–∞—Ç –∏–¥–æ–º–∞ –¥–æ–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?", replyMarkup: inlineKeyboard);
        Console.WriteLine($"üì© –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Å–∞–≤–æ–ª –æ–∏–¥–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ —Å–∏—Ñ–∞—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
    }

    private static async Task SendSubscriptionPrompt(long chatId)
    {
        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithUrl("üì¢ –ë–∞ –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥", "https://t.me/Career1ink") },
            new[] { InlineKeyboardButton.WithCallbackData("‚úÖ –û–±—É–Ω–∞—Ä–æ —Å–∞–Ω“∑–µ–¥", "check_subscription") }
        });
        await botClient.SendTextMessageAsync(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥, –±–∞—ä–¥ –∞–∑ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥:", replyMarkup: inlineKeyboard);
        Console.WriteLine($"üì¢ –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Å–∞–≤–æ–ª–∏ –æ–±—É–Ω–∞—à–∞–≤ƒ´ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
    }

    private static async Task SendFaculties(long chatId)
    {
        try
        {
            using var client = new HttpClient();
            var response = await client.GetStringAsync($"{baseUrl}/get_faculties");
            var faculties = JsonSerializer.Deserialize<string[]>(response);

            if (faculties == null || faculties.Length == 0)
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –§–∞–∫—É–ª—Ç–∞“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥–∞–Ω–¥!");
                return;
            }

            var buttons = faculties.Select(f => InlineKeyboardButton.WithCallbackData(f, $"faculty_{f}")).Chunk(2).ToArray();
            var keyboard = new InlineKeyboardMarkup(buttons);
            await botClient.SendTextMessageAsync(chatId, "üè´ –§–∞–∫—É–ª—Ç–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", replyMarkup: keyboard);
            Console.WriteLine($"üìã –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Ä”Ø–π—Ö–∞—Ç–∏ —Ñ–∞–∫—É–ª—Ç–∞“≥–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∞–∫—É–ª—Ç–∞“≥–æ —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task SendCourses(long chatId, string faculty)
    {
        try
        {
            using var client = new HttpClient();
            var response = await client.GetStringAsync($"{baseUrl}/get_courses?faculty={Uri.EscapeDataString(faculty)}");
            var courses = JsonSerializer.Deserialize<string[]>(response);

            if (courses == null || courses.Length == 0)
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –ö—É—Ä—Å“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥–∞–Ω–¥!");
                return;
            }

            var buttons = courses.Select(c => InlineKeyboardButton.WithCallbackData(c, $"course_{faculty}_{c}")).Chunk(2).ToArray();
            var backButton = new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", "back_faculty") };
            var keyboard = new InlineKeyboardMarkup(buttons.Append(backButton).ToArray());
            await botClient.SendTextMessageAsync(chatId, $"üìö {faculty} - –ö—É—Ä—Å—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", replyMarkup: keyboard);
            Console.WriteLine($"üìã –ö—É—Ä—Å“≥–æ–∏ —Ñ–∞–∫—É–ª—Ç–∞–∏ {faculty} –±–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –∫—É—Ä—Å“≥–æ —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task SendGroups(long chatId, string faculty, string course)
    {
        try
        {
            using var client = new HttpClient();
            var response = await client.GetStringAsync($"{baseUrl}/get_groups?faculty={Uri.EscapeDataString(faculty)}&course={Uri.EscapeDataString(course)}");
            var groups = JsonSerializer.Deserialize<string[]>(response);

            if (groups == null || groups.Length == 0)
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –ì—É—Ä”Ø“≥“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥–∞–Ω–¥!");
                return;
            }

            var buttons = groups.Select(g => InlineKeyboardButton.WithCallbackData(g, $"group_{faculty}_{course}_{g}")).Chunk(2).ToArray();
            var backButton = new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", $"back_course_{faculty}") };
            var keyboard = new InlineKeyboardMarkup(buttons.Append(backButton).ToArray());
            await botClient.SendTextMessageAsync(chatId, $"üìÑ {faculty} - {course} - –ì—É—Ä”Ø“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", replyMarkup: keyboard);
            Console.WriteLine($"üìã –ì—É—Ä”Ø“≥“≥–æ–∏ {faculty}/{course} –±–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –≥—É—Ä”Ø“≥“≥–æ —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    public static async Task UpdateMenuButton(long chatId, string faculty, string course, string group)
    {
        string webAppUrl = $"{baseUrl}/{faculty}/{course}/{group}";
        try
        {
            var newMenuButton = new MenuButtonWebApp
            {
                Text = "üìö –ü—É—Ä—Ä–∞",
                WebApp = new WebAppInfo { Url = webAppUrl }
            };
            await botClient.SetChatMenuButtonAsync(chatId: chatId, menuButton: newMenuButton);
            Console.WriteLine($"üîÑ –¢—É–≥–º–∞–∏ Web App –±–∞—Ä–æ–∏ {chatId} –Ω–∞–≤ –∫–∞—Ä–¥–∞ —à—É–¥: {webAppUrl}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –î–∞—Ä –Ω–∞–≤ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ Web App —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    public static async Task UpdateTeacherMenuButton(long chatId, string teacherCode)
    {
        string webAppUrl = $"{baseUrl}/teacher/{teacherCode}";
        try
        {
            var newMenuButton = new MenuButtonWebApp
            {
                Text = "üìö –ü—É—Ä—Ä–∞",
                WebApp = new WebAppInfo { Url = webAppUrl }
            };
            await botClient.SetChatMenuButtonAsync(chatId: chatId, menuButton: newMenuButton);
            await botClient.SendTextMessageAsync(chatId, "üìÖ –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –∂–∞–¥–≤–∞–ª–∏ –ø—É—Ä—Ä–∞ —Ç—É–≥–º–∞–∏ *–ü—É—Ä—Ä–∞*-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!");
            Console.WriteLine($"üîÑ –¢—É–≥–º–∞–∏ Web App –±–∞—Ä–æ–∏ {chatId} –Ω–∞–≤ –∫–∞—Ä–¥–∞ —à—É–¥: {webAppUrl}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –î–∞—Ä –Ω–∞–≤ –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ Web App —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task AskForDaySelection(long chatId, bool isTeacher = false)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new KeyboardButton[] { "üìÖ –ò–º—Ä”Ø–∑", "üìÖ –§–∞—Ä–¥–æ" },
            new KeyboardButton[] { "–î—É—à–∞–Ω–±–µ", "–°–µ—à–∞–Ω–±–µ", "–ß–æ—Ä—à–∞–Ω–±–µ" },
            new KeyboardButton[] { "–ü–∞–Ω“∑—à–∞–Ω–±–µ", "“∂—É–º—ä–∞", "–®–∞–Ω–±–µ" }
        })
        {
            ResizeKeyboard = true
        };
        string message = "üìå –õ—É—Ç—Ñ–∞–Ω —Ä”Ø–∑–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:";
        await botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
        Console.WriteLine($"üìÖ –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Å–∞–≤–æ–ª–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ —Ä”Ø–∑ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥ (–º—É–∞–ª–ª–∏–º: {isTeacher}).");
    }

    private static async Task HandleDaySelection(long chatId, string selectedDay)
    {
        if (!userStates.ContainsKey(chatId))
            userStates[chatId] = new UserState();

        var state = userStates[chatId];

        string dayToFetch = selectedDay switch
        {
            "üìÖ –ò–º—Ä”Ø–∑" => DateTime.Today.ToString("dddd", new CultureInfo("tg-TJ")),
            "üìÖ –§–∞—Ä–¥–æ" => DateTime.Today.AddDays(1).ToString("dddd", new CultureInfo("tg-TJ")),
            "–î—É—à–∞–Ω–±–µ" => "–î—É—à–∞–Ω–±–µ",
            "–°–µ—à–∞–Ω–±–µ" => "–°–µ—à–∞–Ω–±–µ",
            "–ß–æ—Ä—à–∞–Ω–±–µ" => "–ß–æ—Ä—à–∞–Ω–±–µ",
            "–ü–∞–Ω“∑—à–∞–Ω–±–µ" => "–ü–∞–Ω“∑—à–∞–Ω–±–µ",
            "“∂—É–º—ä–∞" => "“∂—É–º—ä–∞",
            "–®–∞–Ω–±–µ" => "–®–∞–Ω–±–µ",
            _ => selectedDay
        };

        string webAppUrl;
        if (state.IsTeacherMode && state.SelectedTeacherCode != null)
        {
            webAppUrl = $"{baseUrl}/get_teacher_day/{state.SelectedTeacherCode}?day={Uri.EscapeDataString(dayToFetch)}";
            Console.WriteLine($"üì§ –°—É–ø–æ—Ä–∏—à–∏ –∂–∞–¥–≤–∞–ª–∏ —Ä”Ø–∑–æ–Ω–∞ –±–∞—Ä–æ–∏ –º—É–∞–ª–ª–∏–º: {webAppUrl}");
        }
        else
        {
            if (string.IsNullOrEmpty(state.SelectedFaculty) || string.IsNullOrEmpty(state.SelectedCourse) || string.IsNullOrEmpty(state.SelectedGroup))
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª —Ñ–∞–∫—É–ª—Ç–∞, –∫—É—Ä—Å –≤–∞ –≥—É—Ä”Ø“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!"); //-----------------------------------------------------------------------------------------
                await SendUserTypeSelection(chatId);
                return;
            }
            webAppUrl = $"{baseUrl}/get_day/{state.SelectedFaculty}/{state.SelectedCourse}/{state.SelectedGroup}?day={Uri.EscapeDataString(dayToFetch)}";
            Console.WriteLine($"üì§ –°—É–ø–æ—Ä–∏—à–∏ –∂–∞–¥–≤–∞–ª–∏ —Ä”Ø–∑–æ–Ω–∞ –±–∞—Ä–æ–∏ –¥–æ–Ω–∏—à“∑”Ø: {webAppUrl}");
        }

        try
        {
            using var client = new HttpClient();
            var response = await client.GetStringAsync(webAppUrl);
            const int maxLength = 4000;
            if (response.Length <= maxLength)
            {
                await botClient.SendTextMessageAsync(chatId, response, parseMode: ParseMode.Html);
                Console.WriteLine($"‚úÖ –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} –∂–∞–¥–≤–∞–ª–∏ —Ä”Ø–∑–æ–Ω–∞ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
            }
            else
            {
                int partsCount = (response.Length + maxLength - 1) / maxLength;
                for (int i = 0; i < partsCount; i++)
                {
                    int start = i * maxLength;
                    int length = Math.Min(maxLength, response.Length - start);
                    string part = response.Substring(start, length);
                    await botClient.SendTextMessageAsync(chatId, part, parseMode: ParseMode.Html);
                    Console.WriteLine($"‚úÖ –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} “õ–∏—Å–º–∏ –∂–∞–¥–≤–∞–ª {i + 1}/{partsCount} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
                    await Task.Delay(500);
                }
            }
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –∂–∞–¥–≤–∞–ª —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task HandleTeacherCodeInput(long chatId, string code)
    {
        if (!userStates.ContainsKey(chatId))
            userStates[chatId] = new UserState();

        var state = userStates[chatId];

        try
        {
            using var client = new HttpClient();
            var content = new StringContent(JsonSerializer.Serialize(new { teacher_code = code }), System.Text.Encoding.UTF8, "application/json");
            var response = await client.PostAsync($"{baseUrl}/check_teacher_code", content);
            var result = JsonSerializer.Deserialize<Dictionary<string, string>>(await response.Content.ReadAsStringAsync());

            if (result["status"] == "success")
            {
                state.SelectedTeacherCode = code;
                state.IsTeacherMode = true;
                Console.WriteLine($"‚úÖ –ö–æ–¥–∏ –º—É–∞–ª–ª–∏–º –Ω–∞—Å–± —à—É–¥: {state.SelectedTeacherCode}, isTeacherMode: {state.IsTeacherMode}");
                await botClient.SendTextMessageAsync(chatId, $"üéâ –•—É—à –æ–º–∞–¥–µ–¥, –£—Å—Ç–æ–¥ {result["teacher_name"]}!");
                await UpdateTeacherMenuButton(chatId, code);
                await AskForDaySelection(chatId, true);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –ö–æ–¥ –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç! –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫–æ–¥ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.");
            }
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä —Å–∞–Ω“∑–∏—à–∏ –∫–æ–¥ —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task ExportTeachersList(long chatId)
    {
        try
        {
            using var client = new HttpClient();
            var response = await client.GetStringAsync($"{baseUrl}/get_teachers_with_codes");
            var teachers = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(response);

            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("–†”Ø–π—Ö–∞—Ç–∏ –ú—É–∞–ª–ª–∏–º–æ–Ω");
                worksheet.Cell(1, 1).Value = "–ú—É–∞–ª–ª–∏–º";
                worksheet.Cell(1, 2).Value = "–ö–æ–¥–∏ –º–∞—Ö—Å—É—Å";

                for (int i = 0; i < teachers.Count; i++)
                {
                    worksheet.Cell(i + 2, 1).Value = teachers[i]["teacher_name"];
                    worksheet.Cell(i + 2, 2).Value = teachers[i]["teacher_code"];
                }

                string fileName = "–†”Ø–π—Ö–∞—Ç–∏_–ú—É–∞–ª–ª–∏–º–æ–Ω.xlsx";
                workbook.SaveAs(fileName);

                using (var stream = new FileStream(fileName, FileMode.Open))
                {
                    await botClient.SendDocumentAsync(chatId, new InputFileStream(stream, fileName), caption: "üìã –†”Ø–π—Ö–∞—Ç–∏ –º—É–∞–ª–ª–∏–º–æ–Ω –±–æ –∫–æ–¥“≥–æ–∏ –º–∞—Ö—Å—É—Å!");
                }
                File.Delete(fileName);
            }
            Console.WriteLine($"‚úÖ –ë–∞ –∫–æ—Ä–±–∞—Ä {chatId} —Ä”Ø–π—Ö–∞—Ç–∏ –º—É–∞–ª–ª–∏–º–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.");
        }
        catch (Exception ex)
        {
            await botClient.SendTextMessageAsync(chatId, $"‚ùå –•–∞—Ç–æ–≥ƒ´: {ex.Message}");
            Console.WriteLine($"‚ùå –î–∞—Ä —Å–æ–¥–∏—Ä–æ—Ç–∏ —Ä”Ø–π—Ö–∞—Ç–∏ –º—É–∞–ª–ª–∏–º–æ–Ω —Ö–∞—Ç–æ–≥ƒ´: {ex.Message}");
        }
    }

    private static async Task HandleCallbackQuery(CallbackQuery callbackQuery)
    {
        long chatId = callbackQuery.Message.Chat.Id;
        int messageId = callbackQuery.Message.MessageId;
        string data = callbackQuery.Data;
        Console.WriteLine($"üì© Callback “õ–∞–±—É–ª —à—É–¥: {data}");

        if (!userStates.ContainsKey(chatId))
            userStates[chatId] = new UserState();

        var state = userStates[chatId];

        await botClient.DeleteMessageAsync(chatId, messageId);

        if (data == "check_subscription")
        {
            bool isSubscribed = await IsUserSubscribed(callbackQuery.From.Id);
            if (isSubscribed)
            {
                await SendWelcomeMessage(chatId);
                await SendUserTypeSelection(chatId);
            }
            else
            {
                await SendSubscriptionPrompt(chatId);
            }
        }
        else if (data == "student")
        {
            state.IsTeacherMode = false;
            state.SelectedTeacherCode = null;
            state.SelectedFaculty = "";
            state.SelectedCourse = "";
            state.SelectedGroup = "";
            await SendFaculties(chatId);
        }
        else if (data == "teacher")
        {
            state.IsTeacherMode = true;
            state.SelectedFaculty = "";
            state.SelectedCourse = "";
            state.SelectedGroup = "";
            state.SelectedTeacherCode = null;
            await botClient.SendTextMessageAsync(chatId, "üîë –õ—É—Ç—Ñ–∞–Ω –∫–æ–¥–∏ –º–∞—Ö—Å—É—Å–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:");
        }
        else if (data.StartsWith("faculty_"))
        {
            state.SelectedFaculty = data.Substring(8);
            await SendCourses(chatId, state.SelectedFaculty);
        }
        else if (data.StartsWith("course_"))
        {
            string[] parts = data.Substring(7).Split('_');
            state.SelectedFaculty = parts[0];
            state.SelectedCourse = parts[1];
            await SendGroups(chatId, state.SelectedFaculty, state.SelectedCourse);
        }
        else if (data.StartsWith("group_"))
        {
            string[] parts = data.Substring(6).Split('_');
            state.SelectedFaculty = parts[0];
            state.SelectedCourse = parts[1];
            state.SelectedGroup = parts[2];
            await UpdateMenuButton(chatId, state.SelectedFaculty, state.SelectedCourse, state.SelectedGroup);
            await AskForDaySelection(chatId);
        }
        else if (data.StartsWith("back_"))
        {
            string[] parts = data.Split('_');
            if (parts[1] == "faculty")
                await SendFaculties(chatId);
            else if (parts[1] == "course")
                await SendCourses(chatId, parts[2]);
        }
    }
}